{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAuBhD,OACI,sBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC7CN,EAAc,MAUlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAxBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCJlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaXM,GAbW,4CAAH,sDCFPO,EAAc,SAAC,GAAwB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAKN,IACrB,4BAAKA,QCJJO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECCd,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GAEHH,EAAS,CACTf,KAAMkB,EACNL,SAAS,SAGd,CAAEpB,IAEEqB,EDjB2BK,CAAc1B,GAAnCa,EAFyB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEMA,GADAA,EAAIC,aEiCnBgB,EA9CM,WAAM,MAGazC,mBAAS,CAAC,cAHvB,mBAGhBQ,EAHgB,KAGJT,EAHI,KAkBvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQS,EAAWe,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADLA,YCtB9B4B,IAASC,OAAQ,cAAC,EAAD,IACjBC,SAASC,eAAe,W","file":"static/js/main.5b5f0f52.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n\r\n            setCategories(categories => [ inputValue, ...categories ]);\r\n            setInputValue('');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //LOS COMPONENTES DE REACT SOLO DEBEN REGRESAR 1 ELEMENTO. PERO ESE ELEMENTO PUEDE TRAER LOS ELEMENTOS\r\n    //QUE REQUIERA. POR EJEMPLO SI REGRESO UN FORMULARIO, EL FORMULARIO ES 1 ELEMENTO Y DENTRO TIENE MUCHOS\r\n    //ELEMENTOS MAS, ESO ES VALIDO.\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value= { inputValue }\r\n                onChange= { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=0PDL55vnSVPfoUnChEoCzUY4vlzZKieT`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n     return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url } ) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src= {url} alt={title}></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category }) => {\r\n\r\n    const { data:images, loading } =  useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n        <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n        { loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n\r\n        <div className='card-grid'>\r\n                {\r\n                    images.map( img  => ( \r\n                        <GifGridItem\r\n                         key={img.id}\r\n                         { ...img }\r\n                         />                                              \r\n                    ))\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n//CUSTOM HOOK\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( imgs => {             \r\n\r\n            setState({\r\n            data: imgs,\r\n            loading: false\r\n            });        \r\n        })\r\n    }, [ category ])\r\n\r\n    return state;\r\n\r\n\r\n\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // //AGREGAR ELEMENTO AL ARREGLO AL DAR CLICK\r\n    // const handleAdd = () =>{\r\n    //     const nuevoValor = \"Naruto\";\r\n    //     //OPCION 1. Agregamos al final\r\n    //     //setCategories( [...categories, nuevoValor]);\r\n\r\n    //     //OPCION 2. Agregamos al inicio\r\n    //     //setCategories( [nuevoValor, ...categories]);\r\n\r\n    //     //OPCION 3.\r\n    //     setCategories( categories => [... categories, nuevoValor]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => ( \r\n                        <GifGrid \r\n                        key={ category }\r\n                        category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\n// ReactDOM.render(\n//     <App />,\n//   document.getElementById('root')\n// );\n\nReactDOM.render( <GifExpertApp /> ,\ndocument.getElementById('root')\n);\n\n"],"sourceRoot":""}